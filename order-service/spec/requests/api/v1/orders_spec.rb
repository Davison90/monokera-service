require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/orders", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Order. As you add validations to Order, be sure to
  # adjust the attributes here as well.
  let(:ordered_attributes) {
    {
      customer_id: 1,
      product_name: Faker::Commerce.product_name,
      quantity: Faker::Number.between(from: 1, to: 100),
      price: Faker::Commerce.price(range: 0..1000.0),
      status: true
    }
  }

  let(:invalid_ordered_attributes) {
    {
      customer_id: 1,
      product_name: Faker::Commerce.product_name,
      quantity: 0,
      price: Faker::Commerce.price(range: 0..1000.0),
      status: true
    }
  }

  let(:customer_response) do
    instance_double(
      HTTParty::Response,
      success?: true,
      parsed_response: ordered_attributes,
      code: 200
    )
  end

  before do
    ENV['CUSTOMER_SERVICE_URL'] = 'http://customer-service:3000'
    allow(CustomerClient).to receive(:fetch_customer).with(ordered_attributes[:customer_id]).and_return(customer_response)
    allow(OrderCreatedPublisher).to receive(:publish).and_return(true)
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Order" do
        expect {
          post api_v1_orders_path, params: { order: ordered_attributes }, as: :json
        }.to change(Order, :count).by(1)
      end

      it "renders a JSON response with errors for the new order if rabbit is not available" do
        allow(OrderCreatedPublisher).to receive(:publish).and_return(false)

        post api_v1_orders_path, params: { order: ordered_attributes }, as: :json
        expect(response).to have_http_status(:unprocessable_content)
      end

      it "renders a JSON response with errors for the new order if customer service is not available" do
        ENV['CUSTOMER_SERVICE_URL'] = 'http://customer-service:3000'
        allow(CustomerClient).to receive(:fetch_customer).and_return(nil)

        post api_v1_orders_path, params: { order: ordered_attributes }, as: :json
        expect(response).to have_http_status(:unprocessable_content)
      end
    end

    context "with invalid parameters" do
      it "does not create a new Order" do
        expect {
          post api_v1_orders_path, params: { order: invalid_ordered_attributes }, as: :json
        }.to change(Order, :count).by(0)
      end

      it "renders a JSON response with errors for the new order" do
        post api_v1_orders_path, params: { order: invalid_ordered_attributes }, as: :json
        expect(response).to have_http_status(:unprocessable_content)
      end
    end
  end

  describe "GET /client_orders" do
    it "renders a successful response" do
      Order.create! ordered_attributes

      get api_v1_customer_orders_path(customer_id: 1), as: :json
      expect(response).to be_successful
    end

    it "renders a not found response when there are no orders for the customer" do
      get api_v1_customer_orders_path(customer_id: 999), as: :json
      expect(response).to have_http_status(:not_found)
    end
  end
end
